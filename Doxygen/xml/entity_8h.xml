<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="entity_8h" kind="file" language="C++">
    <compoundname>entity.h</compoundname>
    <includes refid="globals_8h" local="yes">globals.h</includes>
    <includes refid="graphics_8h" local="yes">graphics.h</includes>
    <includes refid="ai__interpret_8h" local="yes">ai_interpret.h</includes>
    <includedby refid="ai__interpret_8c" local="yes">dumb-ways-to-memorize/ai_interpret.c</includedby>
    <includedby refid="parsevariable_8h" local="yes">dumb-ways-to-memorize/parsevariable.h</includedby>
    <includedby refid="parsepowerup_8h" local="yes">dumb-ways-to-memorize/parsepowerup.h</includedby>
    <includedby refid="dumb__physics_8h" local="yes">dumb-ways-to-memorize/dumb_physics.h</includedby>
    <includedby refid="dumb__physics_8c" local="yes">dumb-ways-to-memorize/dumb_physics.c</includedby>
    <includedby refid="player_8h" local="yes">dumb-ways-to-memorize/player.h</includedby>
    <includedby refid="entity_8c" local="yes">dumb-ways-to-memorize/entity.c</includedby>
    <includedby refid="parselevel_8h" local="yes">dumb-ways-to-memorize/parselevel.h</includedby>
    <includedby refid="game_8c" local="yes">dumb-ways-to-memorize/game.c</includedby>
    <includedby refid="parsefunction_8h" local="yes">dumb-ways-to-memorize/parsefunction.h</includedby>
    <includedby refid="parselevel_8c" local="yes">dumb-ways-to-memorize/parselevel.c</includedby>
    <includedby refid="parsepowerup_8c" local="yes">dumb-ways-to-memorize/parsepowerup.c</includedby>
    <includedby refid="player_8c" local="yes">dumb-ways-to-memorize/player.c</includedby>
    <includedby refid="quick__controller_8c" local="yes">dumb-ways-to-memorize/quick_controller.c</includedby>
    <incdepgraph>
      <node id="84">
        <label>globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>SDL.h</label>
      </node>
      <node id="85">
        <label>jsmn.h</label>
        <link refid="jsmn_8h"/>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>parseobject.h</label>
        <link refid="parseobject_8h"/>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>stddef.h</label>
      </node>
      <node id="83">
        <label>dumb-ways-to-memorize/entity.h</label>
        <link refid="entity.h"/>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>ai_interpret.h</label>
        <link refid="ai__interpret_8h"/>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="96">
        <label>dumb-ways-to-memorize/parsepowerup.c</label>
        <link refid="parsepowerup_8c"/>
      </node>
      <node id="98">
        <label>dumb-ways-to-memorize/parsepowerup.h</label>
        <link refid="parsepowerup_8h"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>dumb-ways-to-memorize/parsefunction.c</label>
        <link refid="parsefunction_8c"/>
      </node>
      <node id="107">
        <label>dumb-ways-to-memorize/parsefunction.h</label>
        <link refid="parsefunction_8h"/>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>dumb-ways-to-memorize/game.c</label>
        <link refid="game_8c"/>
      </node>
      <node id="104">
        <label>dumb-ways-to-memorize/dumb_physics.c</label>
        <link refid="dumb__physics_8c"/>
      </node>
      <node id="103">
        <label>dumb-ways-to-memorize/dumb_physics.h</label>
        <link refid="dumb__physics_8h"/>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>dumb-ways-to-memorize/menu.c</label>
        <link refid="menu_8c"/>
      </node>
      <node id="101">
        <label>dumb-ways-to-memorize/player.c</label>
        <link refid="player_8c"/>
      </node>
      <node id="105">
        <label>dumb-ways-to-memorize/player.h</label>
        <link refid="player_8h"/>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>dumb-ways-to-memorize/parsevariable.c</label>
        <link refid="parsevariable_8c"/>
      </node>
      <node id="93">
        <label>dumb-ways-to-memorize/parsevariable.h</label>
        <link refid="parsevariable_8h"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>dumb-ways-to-memorize/parselevel.c</label>
        <link refid="parselevel_8c"/>
      </node>
      <node id="106">
        <label>dumb-ways-to-memorize/parselevel.h</label>
        <link refid="parselevel_8h"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>dumb-ways-to-memorize/entity.c</label>
        <link refid="entity_8c"/>
      </node>
      <node id="91">
        <label>dumb-ways-to-memorize/entity.h</label>
        <link refid="entity.h"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>dumb-ways-to-memorize/ai_interpret.c</label>
        <link refid="ai__interpret_8c"/>
      </node>
      <node id="102">
        <label>dumb-ways-to-memorize/quick_controller.c</label>
        <link refid="quick__controller_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structentity__s" prot="public">entity_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="entity_8h_1a0b7e155f796ed5e7b49b0f44867135ee" prot="public" static="no">
        <name>MAX_ENTITIES</name>
        <initializer>250</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="8" column="9" bodyfile="dumb-ways-to-memorize/entity.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="entity_8h_1a06fc171388523b3731c50218617d64b1" prot="public" static="no">
        <name>ENTITY_DIR_LEFT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="9" column="9" bodyfile="dumb-ways-to-memorize/entity.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="entity_8h_1a500b112c5fef7d3144b377ab85307075" prot="public" static="no">
        <name>ENTITY_DIR_RIGHT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="10" column="9" bodyfile="dumb-ways-to-memorize/entity.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" prot="public" static="no">
        <type>struct <ref refid="structentity__s" kindref="compound">entity_s</ref></type>
        <definition>typedef struct entity_s entity_t</definition>
        <argsstring></argsstring>
        <name>entity_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="427" column="1" bodyfile="dumb-ways-to-memorize/entity.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="entity_8h_1af8475c9d8ef741632cc7461fec5c0fad" prot="public" static="no" mutable="no">
        <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
        <definition>entity_t* gEntityDictionary</definition>
        <argsstring></argsstring>
        <name>gEntityDictionary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Entities loaded from files AKA cached entities </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="45" column="1" bodyfile="dumb-ways-to-memorize/game.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="entity_8h_1a725e495de3797c12610995f701dd8a6a" prot="public" static="no" mutable="no">
        <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
        <definition>entity_t* gEntities</definition>
        <argsstring></argsstring>
        <name>gEntities</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The memory for entities that are currently running in the game </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="46" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="entity_8h_1a7c67a8b083cb98b1c3eaf871bc4dd4cd" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int gLastEntity</definition>
        <argsstring></argsstring>
        <name>gLastEntity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The last entity that was free&apos;d or created </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="47" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="entity_8h_1a5ad36cd8551508ec69032e3dc782a1ba" prot="public" static="no" mutable="no">
        <type>void(*)(<ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *)</type>
        <definition>void(*)(entity_t *) GetFunctionAI(ai_function_t *data)</definition>
        <argsstring>(ai_function_t *data)</argsstring>
        <name>GetFunctionAI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a function pointer to the think function, given ai_function data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">parameter1</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the first parameter.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else a GetFunctionAI(ai_function_t *data.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="150" column="1" bodyfile="dumb-ways-to-memorize/ai_interpret.c" bodystart="238" bodyend="259"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="entity_8h_1a9aa4a5f113750202be9f45db34908955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int InitEntitySystem</definition>
        <argsstring>()</argsstring>
        <name>InitEntitySystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Init entity system.</para><para><simplesect kind="return"><para>An int of failure state. 0 if good, -1 if error.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="57" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="217" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1ad5cd21060189ddd8246414069ee01676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
        <definition>entity_t* InitNewEntity</definition>
        <argsstring>()</argsstring>
        <name>InitNewEntity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Init new entity in the memory of global entity space.</para><para><simplesect kind="return"><para>null if it fails, else a pointer to an entity_t.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="67" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="235" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a373409dde746bc4935afd92aa8975f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
        <definition>entity_t* FindNextFreeCachePos</definition>
        <argsstring>()</argsstring>
        <name>FindNextFreeCachePos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches for the next free cache position in gEntitiesDictionary.</para><para><simplesect kind="return"><para>null if it fails, else the found free cache position.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="77" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="250" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a018dc9e984dbb58b293f263775b528c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
        <definition>entity_t* FindCachedEntity</definition>
        <argsstring>(const char *name)</argsstring>
        <name>FindCachedEntity</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches for the cached entity whose gPlayerName matches given str.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gPlayerName</parametername>
</parameternamelist>
<parameterdescription>
<para>The gPlayerName.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else the found cached entity.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="89" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="301" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1aa4c00fea364c35f0a56dd90b9c38efb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
        <definition>entity_t* FindEntity</definition>
        <argsstring>(const char *name)</argsstring>
        <name>FindEntity</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches for the first entity with the gPlayerName of given str.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gPlayerName</parametername>
</parameternamelist>
<parameterdescription>
<para>The gPlayerName.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else the found entity.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="101" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="316" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1ace2c9f2a6fee203dab937c5e716ad7dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
        <definition>entity_t* FindFreeEntity</definition>
        <argsstring>(int *position)</argsstring>
        <name>FindFreeEntity</name>
        <param>
          <type>int *</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches for the first free entity.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">position</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the position.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else the found free entity.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="113" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="331" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a69811b56fbaa2dfc61154fb027632ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
        <definition>entity_t* LookForEntityAtPos</definition>
        <argsstring>(vec2_t position)</argsstring>
        <name>LookForEntityAtPos</name>
        <param>
          <type><ref refid="globals_8h_1a773f2054819bb6014f1e50baa39cb5e3" kindref="member">vec2_t</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look for entity at position.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else a pointer to an entity_t.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="125" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="355" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a1c8f7981791b1935beab73c3faab96a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Distance2Entity</definition>
        <argsstring>(entity_t *self, entity_t *other)</argsstring>
        <name>Distance2Entity</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Distance 2 entity other from entity self.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">self</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the class instance that this method operates on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the other entity.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="138" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="371" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a4804d845517ee1430fc40dfdc3d333df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RunEntities</definition>
        <argsstring>()</argsstring>
        <name>RunEntities</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Executes the entities think functions.</para><para><simplesect kind="note"><para>I think I have the logic wrong.. </para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="159" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="281" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a7406ec610d0755cd8022ceea378f83a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawEntities</definition>
        <argsstring>()</argsstring>
        <name>DrawEntities</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw entities, if they have draw functions.</para><para><simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="167" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="264" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a9a3d7af463607a209c8f52caf9e15c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintEntity</definition>
        <argsstring>(entity_t *ent)</argsstring>
        <name>PrintEntity</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the entities data, used for debug.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ent</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the ent.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="168" column="1" bodyfile="dumb-ways-to-memorize/parsevariable.c" bodystart="230" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1ae27dad323fa0f26748bd2485f5d019e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeEntity</definition>
        <argsstring>(entity_t *ent)</argsstring>
        <name>FreeEntity</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free entity.</para><para><simplesect kind="note"><para>right now it just acts like memset(0) on entities in the global Entities scope. But it free&apos;s any other data that isn&apos;t globally set.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ent</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the ent.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="181" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="379" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1aec8aad072a0215184b68b9815194950c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeNonPlayerEntities</definition>
        <argsstring>()</argsstring>
        <name>FreeNonPlayerEntities</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frees the non player entities, use for Destroy World.</para><para><simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="189" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="409" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a8aebaea1606f89c449d67b1f1afb7cdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShutdownEntitySystem</definition>
        <argsstring>()</argsstring>
        <name>ShutdownEntitySystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shutdown entity system, frees all the entities.</para><para><simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="197" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="427" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a8572f94d16405fa3b42dd584893852bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawGeneric</definition>
        <argsstring>(entity_t *self)</argsstring>
        <name>DrawGeneric</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws the entity via self-&gt;mAnimation if set, or the first sprite which is idle.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">self</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the class instance that this method operates on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="208" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="17" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1af5e7ffbf279b65e179e3f89caad2ec45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawPlayer</definition>
        <argsstring>(entity_t *self)</argsstring>
        <name>DrawPlayer</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="210" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1adb84b9e6a5a5c18dc147a1c0de60fd85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThinkGeneric</definition>
        <argsstring>(entity_t *self)</argsstring>
        <name>ThinkGeneric</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generic think function, checks health and dies when health &lt;= 0</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">self</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the class instance that this method operates on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="221" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="45" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1ae11597dd27ad4ab341e8c1ebf07c15f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThinkPlayer</definition>
        <argsstring>(entity_t *self)</argsstring>
        <name>ThinkPlayer</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The player think function, handles lives ,gamestate switching , and input.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">self</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the class instance that this method operates on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="231" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="59" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a6c8f8a4a732c4324caca6ba22521e5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThinkEnemy</definition>
        <argsstring>(entity_t *self)</argsstring>
        <name>ThinkEnemy</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The modular think function for enemy entities with an AI.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">self</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the class instance that this method operates on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="241" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="102" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a2eb4fef990cd3eb845b5a99fbd22e0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TouchGeneric</definition>
        <argsstring>(entity_t *self, entity_t *other, int type)</argsstring>
        <name>TouchGeneric</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generic touch function, Receives pain from touch and inflict pain on touch depending on hazard types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">self</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the class instance that this method operates on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the other. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="254" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="139" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a0090f3a150bf7833709c04eba953c6e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TouchPlayer</definition>
        <argsstring>(entity_t *self, entity_t *other, int type)</argsstring>
        <name>TouchPlayer</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The player touch function called on collision. If he touches a hazard, he gets damaged.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">self</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the class instance that this method operates on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the other. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/30/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="267" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="168" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a8460f228ddd46eb74cf3693274191365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TouchEnemy</definition>
        <argsstring>(entity_t *self, entity_t *other, int type)</argsstring>
        <name>TouchEnemy</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The touch function for an enemy, currently does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">self</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the class instance that this method operates on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the other. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/30/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="280" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="196" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="entity_8h_1a4929b147240092a570d720f74ce10617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TouchGoal</definition>
        <argsstring>(entity_t *self, entity_t *other, int type)</argsstring>
        <name>TouchGoal</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The touch function for the goal entity / flag. Switches gamestate based on if you won or should go to the next level.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">self</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the class instance that this method operates on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the other entity it touched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/entity.h" line="293" column="1" bodyfile="dumb-ways-to-memorize/entity.c" bodystart="209" bodyend="215"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__ENTITY__H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__ENTITY__H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globals_8h" kindref="compound">globals.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="graphics_8h" kindref="compound">graphics.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ai__interpret_8h" kindref="compound">ai_interpret.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="entity_8h_1a0b7e155f796ed5e7b49b0f44867135ee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_ENTITIES<sp/>250</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="entity_8h_1a06fc171388523b3731c50218617d64b1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENTITY_DIR_LEFT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="entity_8h_1a500b112c5fef7d3144b377ab85307075" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENTITY_DIR_RIGHT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structentity__s" kindref="compound">entity_s</ref><sp/><ref refid="structentity__s" kindref="compound">entity_t</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpower__s" kindref="compound">power_s</ref>;</highlight></codeline>
<codeline lineno="21" refid="structentity__s" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structentity__s" kindref="compound">entity_s</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23" refid="structentity__s_1a8c5ee6d8b825b6da8ab851320eccd45e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structentity__s_1a8c5ee6d8b825b6da8ab851320eccd45e" kindref="member">mHazards</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24" refid="structentity__s_1a24bdc1525ed5bcbf2a8c7027c9e1db5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structentity__s_1a24bdc1525ed5bcbf2a8c7027c9e1db5f" kindref="member">mNextThink</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="25" refid="structentity__s_1a709ed9fa7e17bcc63f51b9e011772aee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structentity__s_1a709ed9fa7e17bcc63f51b9e011772aee" kindref="member">mHealth</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26" refid="structentity__s_1a890d42df13307b51280d145a6b05211d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structentity__s_1a890d42df13307b51280d145a6b05211d" kindref="member">mDamage</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="27" refid="structentity__s_1a069df5fe6b0f5a8eb03b0cc4c2e0ba43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structentity__s_1a069df5fe6b0f5a8eb03b0cc4c2e0ba43" kindref="member">mWeight</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28" refid="structentity__s_1a4bf029653a0ffc8ad5dfddd243aeff72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structentity__s_1a4bf029653a0ffc8ad5dfddd243aeff72" kindref="member">mCurrentFrame</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29" refid="structentity__s_1ada44c567bee8dbfa47693d4068507cab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structentity__s_1ada44c567bee8dbfa47693d4068507cab" kindref="member">mDirection</ref>:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30" refid="structentity__s_1afe71918d74f1053c28126544dce2f32b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="globals_8h_1a09e75d7e17aa0fd73648231363dcc13a" kindref="member">collision_type_t</ref><sp/><ref refid="structentity__s_1afe71918d74f1053c28126544dce2f32b" kindref="member">mCollisionType</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31" refid="structentity__s_1aa50a2f30db6a433d25f42fe58ee20995" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="globals_8h_1a99f3d33a52ee74fc145c14ceee9d4154" kindref="member">entity_state_t</ref><sp/><ref refid="structentity__s_1aa50a2f30db6a433d25f42fe58ee20995" kindref="member">mEntityState</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32" refid="structentity__s_1ad454ff27c8d769254a727750ac38592f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsprite__s" kindref="compound">sprite_t</ref><sp/>**<ref refid="structentity__s_1ad454ff27c8d769254a727750ac38592f" kindref="member">mSprites</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33" refid="structentity__s_1ab8851adbf3f67db41bcdac86f698b197" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsprite__s" kindref="compound">sprite_t</ref><sp/>*<ref refid="structentity__s_1ab8851adbf3f67db41bcdac86f698b197" kindref="member">mAnimation</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34" refid="structentity__s_1af3ccc93f657a50bc80718e0fe9ad367f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai__function__s" kindref="compound">ai_function_t</ref><sp/>*<ref refid="structentity__s_1af3ccc93f657a50bc80718e0fe9ad367f" kindref="member">mData</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35" refid="structentity__s_1ad5201d7f075979ee60c684961d6a4ead" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structentity__s_1ad5201d7f075979ee60c684961d6a4ead" kindref="member">mName</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36" refid="structentity__s_1ae9f3b8e36df4503009ee071958f75b6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvec2__s" kindref="compound">vec2_t</ref><sp/><ref refid="structentity__s_1ae9f3b8e36df4503009ee071958f75b6c" kindref="member">mAccel</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37" refid="structentity__s_1ad3ee4f856561237cfaeb8af26759aec1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvec2__s" kindref="compound">vec2_t</ref><sp/><ref refid="structentity__s_1ad3ee4f856561237cfaeb8af26759aec1" kindref="member">mVelocity</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38" refid="structentity__s_1af80cb24cef46274686528f461642ba50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvec2__s" kindref="compound">vec2_t</ref><sp/><ref refid="structentity__s_1af80cb24cef46274686528f461642ba50" kindref="member">mPosition</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="39" refid="structentity__s_1ae045b7ba608e955e791f8af8507b78a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structentity__s_1ae045b7ba608e955e791f8af8507b78a4" kindref="member">Think</ref>)(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="40" refid="structentity__s_1af5c032961c1c6bca1832a0cb3fb34321" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structentity__s_1af5c032961c1c6bca1832a0cb3fb34321" kindref="member">Touch</ref>)(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*other,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41" refid="structentity__s_1a51719e3ab7c4f8dd260dea013021f53c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structentity__s_1a51719e3ab7c4f8dd260dea013021f53c" kindref="member">Draw</ref>)(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42" refid="structentity__s_1ad1606f41f8e2d6ffa8da068d620a102e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structentity__s_1ad1606f41f8e2d6ffa8da068d620a102e" kindref="member">PowerUp</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpower__s" kindref="compound">power_s</ref><sp/>*<ref refid="structpower__s_1abdbfaddb317fd1c7b9bdd58ea49d0395" kindref="member">info</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal">};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<ref refid="entity_8h_1af8475c9d8ef741632cc7461fec5c0fad" kindref="member">gEntityDictionary</ref>;<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<ref refid="entity_8h_1a725e495de3797c12610995f701dd8a6a" kindref="member">gEntities</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a7c67a8b083cb98b1c3eaf871bc4dd4cd" kindref="member">gLastEntity</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a9aa4a5f113750202be9f45db34908955" kindref="member">InitEntitySystem</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<ref refid="entity_8h_1ad5cd21060189ddd8246414069ee01676" kindref="member">InitNewEntity</ref>();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<ref refid="entity_8h_1a373409dde746bc4935afd92aa8975f4c" kindref="member">FindNextFreeCachePos</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<ref refid="entity_8h_1a018dc9e984dbb58b293f263775b528c6" kindref="member">FindCachedEntity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpower__s_1a5ac083a645d964373f022d03df4849c8" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<ref refid="entity_8h_1aa4c00fea364c35f0a56dd90b9c38efb0" kindref="member">FindEntity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpower__s_1a5ac083a645d964373f022d03df4849c8" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<ref refid="entity_8h_1ace2c9f2a6fee203dab937c5e716ad7dd" kindref="member">FindFreeEntity</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>position);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<ref refid="entity_8h_1a69811b56fbaa2dfc61154fb027632ea8" kindref="member">LookForEntityAtPos</ref>(<ref refid="structvec2__s" kindref="compound">vec2_t</ref><sp/>position);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a1c8f7981791b1935beab73c3faab96a5" kindref="member">Distance2Entity</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*other);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="entity_8h_1a5ad36cd8551508ec69032e3dc782a1ba" kindref="member">GetFunctionAI</ref>(<ref refid="structai__function__s" kindref="compound">ai_function_t</ref><sp/>*data))(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a4804d845517ee1430fc40dfdc3d333df" kindref="member">RunEntities</ref>();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a7406ec610d0755cd8022ceea378f83a6" kindref="member">DrawEntities</ref>();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a9a3d7af463607a209c8f52caf9e15c70" kindref="member">PrintEntity</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1ae27dad323fa0f26748bd2485f5d019e3" kindref="member">FreeEntity</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1aec8aad072a0215184b68b9815194950c" kindref="member">FreeNonPlayerEntities</ref>();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a8aebaea1606f89c449d67b1f1afb7cdb" kindref="member">ShutdownEntitySystem</ref>();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//Draw<sp/>Functions</highlight></codeline>
<codeline lineno="208"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a8572f94d16405fa3b42dd584893852bd" kindref="member">DrawGeneric</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//Unused<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1af5e7ffbf279b65e179e3f89caad2ec45" kindref="member">DrawPlayer</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//Think<sp/>Functions</highlight></codeline>
<codeline lineno="221"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1adb84b9e6a5a5c18dc147a1c0de60fd85" kindref="member">ThinkGeneric</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1ae11597dd27ad4ab341e8c1ebf07c15f8" kindref="member">ThinkPlayer</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a6c8f8a4a732c4324caca6ba22521e5a7" kindref="member">ThinkEnemy</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a2eb4fef990cd3eb845b5a99fbd22e0fc" kindref="member">TouchGeneric</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*other,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a0090f3a150bf7833709c04eba953c6e2" kindref="member">TouchPlayer</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*other,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a8460f228ddd46eb74cf3693274191365" kindref="member">TouchEnemy</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*other,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="entity_8h_1a4929b147240092a570d720f74ce10617" kindref="member">TouchGoal</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*other,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="dumb-ways-to-memorize/entity.h"/>
  </compounddef>
</doxygen>
