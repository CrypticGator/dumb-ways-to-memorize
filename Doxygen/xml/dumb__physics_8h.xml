<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="dumb__physics_8h" kind="file" language="C++">
    <compoundname>dumb_physics.h</compoundname>
    <includes refid="entity_8h" local="yes">entity.h</includes>
    <includedby refid="dumb__physics_8c" local="yes">dumb-ways-to-memorize/dumb_physics.c</includedby>
    <includedby refid="game_8c" local="yes">dumb-ways-to-memorize/game.c</includedby>
    <incdepgraph>
      <node id="57">
        <label>globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>SDL.h</label>
      </node>
      <node id="58">
        <label>jsmn.h</label>
        <link refid="jsmn_8h"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>dumb-ways-to-memorize/dumb_physics.h</label>
        <link refid="dumb_physics.h"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>parseobject.h</label>
        <link refid="parseobject_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>stddef.h</label>
      </node>
      <node id="56">
        <label>entity.h</label>
        <link refid="entity_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>ai_interpret.h</label>
        <link refid="ai__interpret_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="66">
        <label>dumb-ways-to-memorize/game.c</label>
        <link refid="game_8c"/>
      </node>
      <node id="65">
        <label>dumb-ways-to-memorize/dumb_physics.c</label>
        <link refid="dumb__physics_8c"/>
      </node>
      <node id="64">
        <label>dumb-ways-to-memorize/dumb_physics.h</label>
        <link refid="dumb_physics.h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09c" prot="public" static="no">
        <name>physics_laws_t</name>
        <enumvalue id="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09caaf0ba684f808817efe2a9f619fa3e135" prot="public">
          <name>PHYSICS_NULL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09cadba46d443195d2b8b7100dc6cea0385d" prot="public">
          <name>PHYSICS_BASE_FRICTION</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An enum constant representing the physics base friction option </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09ca4e8c0a7e071da8325b356ced17474cf5" prot="public">
          <name>PHYSICS_BASE_SPEED_X</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An enum constant representing the physics base speed in x direction </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09cafd3fa3c618743a3b2092dea0874751ea" prot="public">
          <name>PHYSICS_BASE_SPEED_Y</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An enum constant representing the physics base speed in y direction </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09ca805eb0202fcd39e9f3cfc8ec39a6c41c" prot="public">
          <name>PHYSICS_MAX_SPEED</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An enum constant representing the physics maximum speed </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09ca2e61b2ff5df60b2418d1b96722fbe06f" prot="public">
          <name>PHYSICS_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the Preset Physics values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/dumb_physics.h" line="8" column="1" bodyfile="dumb-ways-to-memorize/dumb_physics.h" bodystart="7" bodyend="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dumb__physics_8h_1ae354ed0629e54a219f0a00be20f6e2f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RunPhysics</definition>
        <argsstring>()</argsstring>
        <name>RunPhysics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Executes physics. RunTime O( n(n+1)/2 ) Applies velocity, acceleration, gravity, and friction. Limits velocity, acceleration, and sets bounds.</para><para><simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/20/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/dumb_physics.h" line="33" column="1" bodyfile="dumb-ways-to-memorize/dumb_physics.c" bodystart="9" bodyend="55"/>
        <references refid="entity_8h_1a0b7e155f796ed5e7b49b0f44867135ee" compoundref="entity_8h" startline="8">MAX_ENTITIES</references>
        <references refid="entity_8c_1a725e495de3797c12610995f701dd8a6a" compoundref="entity_8c" startline="11">gEntities</references>
        <references refid="globals_8h_1a09e75d7e17aa0fd73648231363dcc13aaca8cf2b8670715dc64f0b04625fee211" compoundref="globals_8h" startline="55">COLLISION_TYPE_STATIC</references>
        <references refid="dumb__physics_8c_1a04c93e0b3d3d778e28fc804fc52bf88b" compoundref="dumb__physics_8c" startline="194" endline="204">ApplyFriction</references>
        <references refid="structentity__s_1af80cb24cef46274686528f461642ba50" compoundref="entity_8h" startline="38">entity_s::mPosition</references>
        <references refid="structvec2__s_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="globals_8h" startline="21">vec2_s::x</references>
        <references refid="structentity__s_1ad3ee4f856561237cfaeb8af26759aec1" compoundref="entity_8h" startline="37">entity_s::mVelocity</references>
        <references refid="globals_8h_1a0f595a73aa5c05ebf73729966239e15a" compoundref="globals_8h" startline="136">PHYSICS_LIMITER</references>
        <references refid="structvec2__s_1a0a2f84ed7838f07779ae24c5a9086d33" compoundref="globals_8h" startline="22">vec2_s::y</references>
        <references refid="globals_8h_1a0b07daa7e4d5ab9bc9842dbd07ffbd1c" compoundref="mymath_8c" startline="20" endline="28">Vec2Add</references>
        <references refid="structentity__s_1ae9f3b8e36df4503009ee071958f75b6c" compoundref="entity_8h" startline="36">entity_s::mAccel</references>
        <references refid="dumb__physics_8c_1a1605813c3093dd564cd63719073ce122" compoundref="dumb__physics_8c" startline="162" endline="166">ApplySpeedLimit</references>
        <references refid="dumb__physics_8c_1aac1300a97cdd2b37a4ddfa316dc92ece" compoundref="dumb__physics_8c" startline="168" endline="192">ApplyBounds</references>
        <references refid="dumb__physics_8c_1ac2d2a3c3841dcc0533751a2421d21b58" compoundref="dumb__physics_8c" startline="57" endline="73">CheckCollision</references>
        <references refid="dumb__physics_8c_1a9e6b8c74bb414eeffcbd423e4a40e542" compoundref="dumb__physics_8c" startline="75" endline="160">DoCollision</references>
      </memberdef>
      <memberdef kind="function" id="dumb__physics_8h_1ac2d2a3c3841dcc0533751a2421d21b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CheckCollision</definition>
        <argsstring>(entity_t *self, entity_t *other)</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check collision between entities. (AABB)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">self</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the class instance that this method operates on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the other.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int 1 if colliding, 0 if not.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/20/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/dumb_physics.h" line="46" column="1" bodyfile="dumb-ways-to-memorize/dumb_physics.c" bodystart="57" bodyend="73"/>
        <references refid="globals_8h_1a09e75d7e17aa0fd73648231363dcc13aadaf36ae19b0226a720a707942aea87e5" compoundref="globals_8h" startline="57">COLLISION_TYPE_CLIP</references>
        <references refid="structentity__s_1afe71918d74f1053c28126544dce2f32b" compoundref="entity_8h" startline="30">entity_s::mCollisionType</references>
        <references refid="structentity__s_1af80cb24cef46274686528f461642ba50" compoundref="entity_8h" startline="38">entity_s::mPosition</references>
        <references refid="structvec2__s_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="globals_8h" startline="21">vec2_s::x</references>
        <references refid="structvec2__s_1a0a2f84ed7838f07779ae24c5a9086d33" compoundref="globals_8h" startline="22">vec2_s::y</references>
        <references refid="structentity__s_1ad454ff27c8d769254a727750ac38592f" compoundref="entity_8h" startline="32">entity_s::mSprites</references>
        <references refid="structsprite__s_1a94c822928b0483a24e1f4a176f161954" compoundref="graphics_8h" startline="33">sprite_s::mSize</references>
      </memberdef>
      <memberdef kind="function" id="dumb__physics_8h_1a9e6b8c74bb414eeffcbd423e4a40e542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DoCollision</definition>
        <argsstring>(entity_t *self, entity_t *other)</argsstring>
        <name>DoCollision</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Executes the collision operation. Place self farthest x or y away from other, vice versa. And negative the velocity to half of orginal collision vel, for bounce back.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">self</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the class instance that this method operates on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the other.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/20/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/dumb_physics.h" line="59" column="1" bodyfile="dumb-ways-to-memorize/dumb_physics.c" bodystart="75" bodyend="160"/>
        <references refid="structentity__s_1afe71918d74f1053c28126544dce2f32b" compoundref="entity_8h" startline="30">entity_s::mCollisionType</references>
        <references refid="structentity__s_1af5c032961c1c6bca1832a0cb3fb34321" compoundref="entity_8h" startline="40">entity_s::Touch</references>
        <references refid="structentity__s_1ad5201d7f075979ee60c684961d6a4ead" compoundref="entity_8h" startline="35">entity_s::mName</references>
        <references refid="globals_8h_1a0b07daa7e4d5ab9bc9842dbd07ffbd1c" compoundref="mymath_8c" startline="20" endline="28">Vec2Add</references>
        <references refid="structentity__s_1af80cb24cef46274686528f461642ba50" compoundref="entity_8h" startline="38">entity_s::mPosition</references>
        <references refid="structentity__s_1ad454ff27c8d769254a727750ac38592f" compoundref="entity_8h" startline="32">entity_s::mSprites</references>
        <references refid="structsprite__s_1a94c822928b0483a24e1f4a176f161954" compoundref="graphics_8h" startline="33">sprite_s::mSize</references>
        <references refid="structvec2__s_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="globals_8h" startline="21">vec2_s::x</references>
        <references refid="structvec2__s_1a0a2f84ed7838f07779ae24c5a9086d33" compoundref="globals_8h" startline="22">vec2_s::y</references>
        <references refid="globals_8h_1a09e75d7e17aa0fd73648231363dcc13aa7e4186c206af11ddf23d64e3d19c4bdb" compoundref="globals_8h" startline="56">COLLISION_TYPE_RAGDOLL</references>
        <references refid="structentity__s_1ad3ee4f856561237cfaeb8af26759aec1" compoundref="entity_8h" startline="37">entity_s::mVelocity</references>
      </memberdef>
      <memberdef kind="function" id="dumb__physics_8h_1a1605813c3093dd564cd63719073ce122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ApplySpeedLimit</definition>
        <argsstring>(vec2_t *a)</argsstring>
        <name>ApplySpeedLimit</name>
        <param>
          <type><ref refid="globals_8h_1a773f2054819bb6014f1e50baa39cb5e3" kindref="member">vec2_t</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies the speed limit to vector a, defined by physics max speed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">a</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the vec2_t to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/dumb_physics.h" line="69" column="1" bodyfile="dumb-ways-to-memorize/dumb_physics.c" bodystart="162" bodyend="166"/>
        <references refid="structvec2__s_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="globals_8h" startline="21">vec2_s::x</references>
        <references refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09ca805eb0202fcd39e9f3cfc8ec39a6c41c" compoundref="dumb__physics_8h" startline="13">PHYSICS_MAX_SPEED</references>
        <references refid="structvec2__s_1a0a2f84ed7838f07779ae24c5a9086d33" compoundref="globals_8h" startline="22">vec2_s::y</references>
      </memberdef>
      <memberdef kind="function" id="dumb__physics_8h_1aac1300a97cdd2b37a4ddfa316dc92ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ApplyBounds</definition>
        <argsstring>(entity_t *ent)</argsstring>
        <name>ApplyBounds</name>
        <param>
          <type><ref refid="entity_8h_1ad0c3149de5542539dcb5c9251c68fbd2" kindref="member">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies the bounds to specified ent, defined by the screen dimensions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ent</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the ent.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/dumb_physics.h" line="79" column="1" bodyfile="dumb-ways-to-memorize/dumb_physics.c" bodystart="168" bodyend="192"/>
        <references refid="structentity__s_1af80cb24cef46274686528f461642ba50" compoundref="entity_8h" startline="38">entity_s::mPosition</references>
        <references refid="structvec2__s_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="globals_8h" startline="21">vec2_s::x</references>
        <references refid="structentity__s_1ad3ee4f856561237cfaeb8af26759aec1" compoundref="entity_8h" startline="37">entity_s::mVelocity</references>
        <references refid="structentity__s_1ae9f3b8e36df4503009ee071958f75b6c" compoundref="entity_8h" startline="36">entity_s::mAccel</references>
        <references refid="globals_8h_1abc330db94c68edccfc134b50a56e134e" compoundref="graphics_8c" startline="16">gScreenWidth</references>
        <references refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09ca805eb0202fcd39e9f3cfc8ec39a6c41c" compoundref="dumb__physics_8h" startline="13">PHYSICS_MAX_SPEED</references>
        <references refid="structvec2__s_1a0a2f84ed7838f07779ae24c5a9086d33" compoundref="globals_8h" startline="22">vec2_s::y</references>
        <references refid="globals_8h_1a530fa2ce59634663df7be20316444f8b" compoundref="graphics_8c" startline="17">gScreenHeight</references>
      </memberdef>
      <memberdef kind="function" id="dumb__physics_8h_1a04c93e0b3d3d778e28fc804fc52bf88b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ApplyFriction</definition>
        <argsstring>(vec2_t *a)</argsstring>
        <name>ApplyFriction</name>
        <param>
          <type><ref refid="globals_8h_1a773f2054819bb6014f1e50baa39cb5e3" kindref="member">vec2_t</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies the friction to vector a, for the nonzero values. Uses Physics_base_friction for friction coefficient.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">a</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the vec2_t to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/dumb_physics.h" line="90" column="1" bodyfile="dumb-ways-to-memorize/dumb_physics.c" bodystart="194" bodyend="204"/>
        <references refid="structvec2__s_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="globals_8h" startline="21">vec2_s::x</references>
        <references refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09cadba46d443195d2b8b7100dc6cea0385d" compoundref="dumb__physics_8h" startline="10">PHYSICS_BASE_FRICTION</references>
        <references refid="structvec2__s_1a0a2f84ed7838f07779ae24c5a9086d33" compoundref="globals_8h" startline="22">vec2_s::y</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__DUMB_PHYSICS__H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__DUMB_PHYSICS__H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="entity_8h" kindref="compound">entity.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9" refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09caaf0ba684f808817efe2a9f619fa3e135" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09caaf0ba684f808817efe2a9f619fa3e135" kindref="member">PHYSICS_NULL</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="10" refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09cadba46d443195d2b8b7100dc6cea0385d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09cadba46d443195d2b8b7100dc6cea0385d" kindref="member">PHYSICS_BASE_FRICTION</ref><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="11" refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09ca4e8c0a7e071da8325b356ced17474cf5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09ca4e8c0a7e071da8325b356ced17474cf5" kindref="member">PHYSICS_BASE_SPEED_X</ref><sp/><sp/><sp/><sp/>=<sp/>5,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="12" refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09cafd3fa3c618743a3b2092dea0874751ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09cafd3fa3c618743a3b2092dea0874751ea" kindref="member">PHYSICS_BASE_SPEED_Y</ref><sp/><sp/><sp/><sp/>=<sp/>10,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="13" refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09ca805eb0202fcd39e9f3cfc8ec39a6c41c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09ca805eb0202fcd39e9f3cfc8ec39a6c41c" kindref="member">PHYSICS_MAX_SPEED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="14" refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09ca2e61b2ff5df60b2418d1b96722fbe06f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09ca2e61b2ff5df60b2418d1b96722fbe06f" kindref="member">PHYSICS_MAX</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">}<ref refid="dumb__physics_8h_1a8a3549fa7a1515ef10a78d6f382fe09c" kindref="member">physics_laws_t</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//typedef<sp/>struct<sp/>physics_s<sp/>physics_t;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//struct<sp/>physics_s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>int<sp/>dummy_var;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dumb__physics_8h_1ae354ed0629e54a219f0a00be20f6e2f0" kindref="member">RunPhysics</ref>();<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dumb__physics_8h_1ac2d2a3c3841dcc0533751a2421d21b58" kindref="member">CheckCollision</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*other);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dumb__physics_8h_1a9e6b8c74bb414eeffcbd423e4a40e542" kindref="member">DoCollision</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*other);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dumb__physics_8h_1a1605813c3093dd564cd63719073ce122" kindref="member">ApplySpeedLimit</ref>(<ref refid="structvec2__s" kindref="compound">vec2_t</ref><sp/>*a);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dumb__physics_8h_1aac1300a97cdd2b37a4ddfa316dc92ece" kindref="member">ApplyBounds</ref>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<sp/>ent);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dumb__physics_8h_1a04c93e0b3d3d778e28fc804fc52bf88b" kindref="member">ApplyFriction</ref>(<ref refid="structvec2__s" kindref="compound">vec2_t</ref><sp/>*a);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="dumb-ways-to-memorize/dumb_physics.h"/>
  </compounddef>
</doxygen>
