<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="graphics_8h" kind="file" language="C++">
    <compoundname>graphics.h</compoundname>
    <includes local="no">SDL.h</includes>
    <includes refid="globals_8h" local="yes">globals.h</includes>
    <includedby refid="entity_8h" local="yes">dumb-ways-to-memorize/entity.h</includedby>
    <includedby refid="entity_8c" local="yes">dumb-ways-to-memorize/entity.c</includedby>
    <includedby refid="game_8c" local="yes">dumb-ways-to-memorize/game.c</includedby>
    <includedby refid="menu_8h" local="yes">dumb-ways-to-memorize/menu.h</includedby>
    <includedby refid="graphics_8c" local="yes">dumb-ways-to-memorize/graphics.c</includedby>
    <includedby refid="menu_8c" local="yes">dumb-ways-to-memorize/menu.c</includedby>
    <incdepgraph>
      <node id="223">
        <label>globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="224" relation="include">
        </childnode>
      </node>
      <node id="222">
        <label>SDL.h</label>
      </node>
      <node id="224">
        <label>jsmn.h</label>
        <link refid="jsmn_8h"/>
        <childnode refid="225" relation="include">
        </childnode>
      </node>
      <node id="225">
        <label>stddef.h</label>
      </node>
      <node id="221">
        <label>dumb-ways-to-memorize/graphics.h</label>
        <link refid="graphics.h"/>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="232">
        <label>dumb-ways-to-memorize/parsepowerup.c</label>
        <link refid="parsepowerup_8c"/>
      </node>
      <node id="234">
        <label>dumb-ways-to-memorize/parsepowerup.h</label>
        <link refid="parsepowerup_8h"/>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
      </node>
      <node id="244">
        <label>dumb-ways-to-memorize/parsefunction.c</label>
        <link refid="parsefunction_8c"/>
      </node>
      <node id="243">
        <label>dumb-ways-to-memorize/parsefunction.h</label>
        <link refid="parsefunction_8h"/>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
      </node>
      <node id="230">
        <label>dumb-ways-to-memorize/game.c</label>
        <link refid="game_8c"/>
      </node>
      <node id="240">
        <label>dumb-ways-to-memorize/dumb_physics.c</label>
        <link refid="dumb__physics_8c"/>
      </node>
      <node id="239">
        <label>dumb-ways-to-memorize/dumb_physics.h</label>
        <link refid="dumb__physics_8h"/>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
      </node>
      <node id="236">
        <label>dumb-ways-to-memorize/menu.c</label>
        <link refid="menu_8c"/>
      </node>
      <node id="245">
        <label>dumb-ways-to-memorize/menu.h</label>
        <link refid="menu_8h"/>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
      </node>
      <node id="237">
        <label>dumb-ways-to-memorize/player.c</label>
        <link refid="player_8c"/>
      </node>
      <node id="241">
        <label>dumb-ways-to-memorize/player.h</label>
        <link refid="player_8h"/>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
      </node>
      <node id="233">
        <label>dumb-ways-to-memorize/parsevariable.c</label>
        <link refid="parsevariable_8c"/>
      </node>
      <node id="229">
        <label>dumb-ways-to-memorize/parsevariable.h</label>
        <link refid="parsevariable_8h"/>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
      </node>
      <node id="231">
        <label>dumb-ways-to-memorize/parselevel.c</label>
        <link refid="parselevel_8c"/>
      </node>
      <node id="242">
        <label>dumb-ways-to-memorize/parselevel.h</label>
        <link refid="parselevel_8h"/>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
      </node>
      <node id="235">
        <label>dumb-ways-to-memorize/entity.c</label>
        <link refid="entity_8c"/>
      </node>
      <node id="227">
        <label>dumb-ways-to-memorize/entity.h</label>
        <link refid="entity_8h"/>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
      </node>
      <node id="246">
        <label>dumb-ways-to-memorize/graphics.c</label>
        <link refid="graphics_8c"/>
      </node>
      <node id="226">
        <label>dumb-ways-to-memorize/graphics.h</label>
        <link refid="graphics.h"/>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
      </node>
      <node id="228">
        <label>dumb-ways-to-memorize/ai_interpret.c</label>
        <link refid="ai__interpret_8c"/>
      </node>
      <node id="238">
        <label>dumb-ways-to-memorize/quick_controller.c</label>
        <link refid="quick__controller_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_frame" prot="public">Frame</innerclass>
    <innerclass refid="structsprite__s" prot="public">sprite_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="graphics_8h_1aed7818555b2da57314243d796315e4e9" prot="public" static="no">
        <name>GAME_NAME</name>
        <initializer>&quot;Dumb Ways to Memorize&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="7" column="9" bodyfile="dumb-ways-to-memorize/graphics.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graphics_8h_1aa7c5e8a32eb1645ee26fda856b4ca41a" prot="public" static="no">
        <name>SCREEN_STRING</name>
        <initializer>&quot;Screen Dimensions&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="8" column="9" bodyfile="dumb-ways-to-memorize/graphics.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graphics_8h_1ab4f60dcfaf8e1c328b2862723508d851" prot="public" static="no">
        <name>SCREEN_RES_W</name>
        <initializer>1280</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="9" column="9" bodyfile="dumb-ways-to-memorize/graphics.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graphics_8h_1a7a7d00e9da31c5ddbab5d35adab314f6" prot="public" static="no">
        <name>SCREEN_RES_H</name>
        <initializer>720</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="10" column="9" bodyfile="dumb-ways-to-memorize/graphics.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graphics_8h_1aeb21c7ac080eea985b7701df626d9cf4" prot="public" static="no">
        <name>MAX_SPRITES</name>
        <initializer>500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="11" column="9" bodyfile="dumb-ways-to-memorize/graphics.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graphics_8h_1a99f9cfd68ef4237b568bda6e3e63312f" prot="public" static="no">
        <name>MAX_ANIMATIONS</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="12" column="9" bodyfile="dumb-ways-to-memorize/graphics.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="graphics_8h_1a5371414b10358aeda7c6bcec8196342f" prot="public" static="no">
        <type>struct <ref refid="structsprite__s" kindref="compound">sprite_s</ref></type>
        <definition>typedef struct sprite_s sprite_t</definition>
        <argsstring></argsstring>
        <name>sprite_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="276" column="1" bodyfile="dumb-ways-to-memorize/graphics.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="graphics_8h_1a7e583fa4ad1a7137e056e5dece1ed6c4" prot="public" static="no" mutable="no">
        <type><ref refid="graphics_8h_1a5371414b10358aeda7c6bcec8196342f" kindref="member">sprite_t</ref> *</type>
        <definition>sprite_t* gSprites</definition>
        <argsstring></argsstring>
        <name>gSprites</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="154" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="graphics_8h_1a3555fbac07f5c5a609c2e9b8c1b81731" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int gLastSprite</definition>
        <argsstring></argsstring>
        <name>gLastSprite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="155" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="graphics_8h_1a222f53a6a442d8f716dffd665e83528a" prot="public" static="no" mutable="no">
        <type>SDL_Window *</type>
        <definition>SDL_Window* gWindow</definition>
        <argsstring></argsstring>
        <name>gWindow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="156" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="graphics_8h_1a4735638969a524c4ac90a88f23c59a1f" prot="public" static="no" mutable="no">
        <type>SDL_Renderer *</type>
        <definition>SDL_Renderer* gRenderer</definition>
        <argsstring></argsstring>
        <name>gRenderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="157" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="graphics_8h_1aec8ecf79cbfef975bd1751e8eac92e0a" prot="public" static="no" mutable="no">
        <type>SDL_Surface *</type>
        <definition>SDL_Surface* gRedSurface</definition>
        <argsstring></argsstring>
        <name>gRedSurface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="158" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="graphics_8h_1a3b5a0de489d49963cac9fd22f187d813" prot="public" static="no" mutable="no">
        <type>SDL_Texture *</type>
        <definition>SDL_Texture* gRedTexture</definition>
        <argsstring></argsstring>
        <name>gRedTexture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="159" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="graphics_8h_1a324d0637f44d796996709bb187909c0c" prot="public" static="no" mutable="no">
        <type>SDL_Renderer *</type>
        <definition>SDL_Renderer* gRedRenderer</definition>
        <argsstring></argsstring>
        <name>gRedRenderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="160" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="graphics_8h_1a5a91ce2f20cdb3efdd3a10f8bcd79fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int InitGraphics</definition>
        <argsstring>()</argsstring>
        <name>InitGraphics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Init graphics system. Calls SDL_Init and allocates memory for the sprites.</para><para><simplesect kind="return"><para>0 if good, -1 if failure.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/16/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="49" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="19" bodyend="90"/>
        <references refid="graphics_8c_1a530fa2ce59634663df7be20316444f8b" compoundref="graphics_8c" startline="17">gScreenHeight</references>
        <references refid="graphics_8c_1abc330db94c68edccfc134b50a56e134e" compoundref="graphics_8c" startline="16">gScreenWidth</references>
        <references refid="graphics_8c_1a222f53a6a442d8f716dffd665e83528a" compoundref="graphics_8c" startline="9">gWindow</references>
        <references refid="graphics_8h_1aed7818555b2da57314243d796315e4e9" compoundref="graphics_8h" startline="7">GAME_NAME</references>
        <references refid="graphics_8h_1ab4f60dcfaf8e1c328b2862723508d851" compoundref="graphics_8h" startline="9">SCREEN_RES_W</references>
        <references refid="graphics_8h_1a7a7d00e9da31c5ddbab5d35adab314f6" compoundref="graphics_8h" startline="10">SCREEN_RES_H</references>
        <references refid="graphics_8c_1a4735638969a524c4ac90a88f23c59a1f" compoundref="graphics_8c" startline="10">gRenderer</references>
        <references refid="graphics_8c_1aec8ecf79cbfef975bd1751e8eac92e0a" compoundref="graphics_8c" startline="11">gRedSurface</references>
        <references refid="graphics_8c_1a324d0637f44d796996709bb187909c0c" compoundref="graphics_8c" startline="13">gRedRenderer</references>
        <references refid="graphics_8c_1a3b5a0de489d49963cac9fd22f187d813" compoundref="graphics_8c" startline="12">gRedTexture</references>
        <references refid="graphics_8h_1aeb21c7ac080eea985b7701df626d9cf4" compoundref="graphics_8h" startline="11">MAX_SPRITES</references>
        <references refid="graphics_8c_1a3555fbac07f5c5a609c2e9b8c1b81731" compoundref="graphics_8c" startline="15">gLastSprite</references>
        <references refid="graphics_8c_1a57deac6adc760a6c690d7c05b1b32b3d" compoundref="graphics_8c" startline="92" endline="105">ShutdownGraphics</references>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a57deac6adc760a6c690d7c05b1b32b3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShutdownGraphics</definition>
        <argsstring>()</argsstring>
        <name>ShutdownGraphics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shutdown graphics system, which frees all sprite data.</para><para><simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/30/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="57" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="92" bodyend="105"/>
        <references refid="graphics_8h_1aeb21c7ac080eea985b7701df626d9cf4" compoundref="graphics_8h" startline="11">MAX_SPRITES</references>
        <references refid="graphics_8c_1a5668bec74dc06834b3141ac6da4063a2" compoundref="graphics_8c" startline="246" endline="259">FreeSprite</references>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a9cf2216f8c9099f0767277b29b0b8044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_frame" kindref="compound">Frame</ref> *</type>
        <definition>Frame* LoadAnimation</definition>
        <argsstring>(int frame_width, int frame_height, int width, int height)</argsstring>
        <name>LoadAnimation</name>
        <param>
          <type>int</type>
          <declname>frame_width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>frame_height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads an animation based on frame_width &amp; frame_height.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the frame. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the frame. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else the animation.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/16/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="72" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="190" bodyend="207"/>
        <references refid="struct_frame_1ae69b5c22d5cd3911965dc992d40ba4fc" compoundref="graphics_8h" startline="17">Frame::Position</references>
        <references refid="structvec2__s_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="globals_8h" startline="21">vec2_s::x</references>
        <references refid="structvec2__s_1a0a2f84ed7838f07779ae24c5a9086d33" compoundref="globals_8h" startline="22">vec2_s::y</references>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1af4c49239d2f0e5306964c66be9553832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="graphics_8h_1a5371414b10358aeda7c6bcec8196342f" kindref="member">sprite_t</ref> *</type>
        <definition>sprite_t* FindSprite</definition>
        <argsstring>(const char *name, int *position)</argsstring>
        <name>FindSprite</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches for the first sprite.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gPlayerName</parametername>
</parameternamelist>
<parameterdescription>
<para>The gPlayerName. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">position</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the position.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else the found sprite.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/16/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="85" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="209" bodyend="224"/>
        <references refid="graphics_8h_1aeb21c7ac080eea985b7701df626d9cf4" compoundref="graphics_8h" startline="11">MAX_SPRITES</references>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a88a59e4cda72f43e47b635ed6c6a9f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="graphics_8h_1a5371414b10358aeda7c6bcec8196342f" kindref="member">sprite_t</ref> *</type>
        <definition>sprite_t* FindFreeSprite</definition>
        <argsstring>(int *position)</argsstring>
        <name>FindFreeSprite</name>
        <param>
          <type>int *</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches for the first free sprite in sprite system memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">position</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the position.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else the found free sprite.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/16/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="97" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="226" bodyend="244"/>
        <references refid="graphics_8c_1a3555fbac07f5c5a609c2e9b8c1b81731" compoundref="graphics_8c" startline="15">gLastSprite</references>
        <references refid="graphics_8h_1aeb21c7ac080eea985b7701df626d9cf4" compoundref="graphics_8h" startline="11">MAX_SPRITES</references>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a9ef47fe758affb875f01b07e551513c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="graphics_8h_1a5371414b10358aeda7c6bcec8196342f" kindref="member">sprite_t</ref> *</type>
        <definition>sprite_t* LoadSprite</definition>
        <argsstring>(const char *name, int flags)</argsstring>
        <name>LoadSprite</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads a sprite.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gPlayerName</parametername>
</parameternamelist>
<parameterdescription>
<para>The file gPlayerName of the image to load. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else the sprite.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/16/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="110" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="107" bodyend="150"/>
        <references refid="graphics_8c_1a3555fbac07f5c5a609c2e9b8c1b81731" compoundref="graphics_8c" startline="15">gLastSprite</references>
        <references refid="graphics_8h_1aeb21c7ac080eea985b7701df626d9cf4" compoundref="graphics_8h" startline="11">MAX_SPRITES</references>
        <references refid="graphics_8c_1af4c49239d2f0e5306964c66be9553832" compoundref="graphics_8c" startline="209" endline="224">FindSprite</references>
        <references refid="structsprite__s_1a43ab0d8eafd71383b2233bdee65911de" compoundref="graphics_8h" startline="35">sprite_s::refCount</references>
        <references refid="graphics_8c_1a88a59e4cda72f43e47b635ed6c6a9f95" compoundref="graphics_8c" startline="226" endline="244">FindFreeSprite</references>
        <references refid="structsprite__s_1a94c822928b0483a24e1f4a176f161954" compoundref="graphics_8h" startline="33">sprite_s::mSize</references>
        <references refid="structvec2__s_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="globals_8h" startline="21">vec2_s::x</references>
        <references refid="structvec2__s_1a0a2f84ed7838f07779ae24c5a9086d33" compoundref="globals_8h" startline="22">vec2_s::y</references>
        <references refid="structsprite__s_1a13441ecc6f09930e330ecc4b48189778" compoundref="graphics_8h" startline="32">sprite_s::mTexture</references>
        <references refid="graphics_8c_1a4735638969a524c4ac90a88f23c59a1f" compoundref="graphics_8c" startline="10">gRenderer</references>
        <references refid="structsprite__s_1a5ac083a645d964373f022d03df4849c8" compoundref="graphics_8h" startline="36">sprite_s::name</references>
        <references refid="structsprite__s_1acd9c3d76b8dfc0aed0c331ec5f0568f1" compoundref="graphics_8h" startline="34">sprite_s::mFrames</references>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a17fde33b1d856d825920d633285aec6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DrawSprite</definition>
        <argsstring>(sprite_t *sprite, int *frame, vec2_t *position, SDL_Renderer *renderer)</argsstring>
        <name>DrawSprite</name>
        <param>
          <type><ref refid="graphics_8h_1a5371414b10358aeda7c6bcec8196342f" kindref="member">sprite_t</ref> *</type>
          <declname>sprite</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="globals_8h_1a773f2054819bb6014f1e50baa39cb5e3" kindref="member">vec2_t</ref> *</type>
          <declname>position</declname>
        </param>
        <param>
          <type>SDL_Renderer *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw the sprite. If mCurrentFrame not set, draws the first frame (0,0). If no position given, will draw as if was background.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">sprite</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the sprite. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">position</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the renderer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if good, -1 if failure</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/16/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="125" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="152" bodyend="188"/>
        <references refid="structsprite__s_1acd9c3d76b8dfc0aed0c331ec5f0568f1" compoundref="graphics_8h" startline="34">sprite_s::mFrames</references>
        <references refid="graphics_8c_1af04a9f3481d89afc13d2e2e0a621fad6" compoundref="graphics_8c" startline="276" endline="282">SDL_SetRect</references>
        <references refid="structsprite__s_1a8ce6c2916d6244600c434144ed6ac296" compoundref="graphics_8h" startline="31">sprite_s::mAnimations</references>
        <references refid="struct_frame_1ae69b5c22d5cd3911965dc992d40ba4fc" compoundref="graphics_8h" startline="17">Frame::Position</references>
        <references refid="structvec2__s_1a6150e0515f7202e2fb518f7206ed97dc" compoundref="globals_8h" startline="21">vec2_s::x</references>
        <references refid="structvec2__s_1a0a2f84ed7838f07779ae24c5a9086d33" compoundref="globals_8h" startline="22">vec2_s::y</references>
        <references refid="structsprite__s_1a94c822928b0483a24e1f4a176f161954" compoundref="graphics_8h" startline="33">sprite_s::mSize</references>
        <references refid="structsprite__s_1a13441ecc6f09930e330ecc4b48189778" compoundref="graphics_8h" startline="32">sprite_s::mTexture</references>
        <references refid="structsprite__s_1a5ac083a645d964373f022d03df4849c8" compoundref="graphics_8h" startline="36">sprite_s::name</references>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a5668bec74dc06834b3141ac6da4063a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeSprite</definition>
        <argsstring>(sprite_t *sprite)</argsstring>
        <name>FreeSprite</name>
        <param>
          <type><ref refid="graphics_8h_1a5371414b10358aeda7c6bcec8196342f" kindref="member">sprite_t</ref> *</type>
          <declname>sprite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free the sprite memory, if recfcount - 1 &gt; 0 nothing happens.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">sprite</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the sprite.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/16/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="135" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="246" bodyend="259"/>
        <references refid="graphics_8c_1af4c49239d2f0e5306964c66be9553832" compoundref="graphics_8c" startline="209" endline="224">FindSprite</references>
        <references refid="structsprite__s_1a5ac083a645d964373f022d03df4849c8" compoundref="graphics_8h" startline="36">sprite_s::name</references>
        <references refid="structsprite__s_1a43ab0d8eafd71383b2233bdee65911de" compoundref="graphics_8h" startline="35">sprite_s::refCount</references>
        <references refid="structsprite__s_1a13441ecc6f09930e330ecc4b48189778" compoundref="graphics_8h" startline="32">sprite_s::mTexture</references>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1aa804be8d810666078d9915033a3d4317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IncrementFrame</definition>
        <argsstring>(sprite_t *sprite)</argsstring>
        <name>IncrementFrame</name>
        <param>
          <type><ref refid="graphics_8h_1a5371414b10358aeda7c6bcec8196342f" kindref="member">sprite_t</ref> *</type>
          <declname>sprite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="138" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="262" bodyend="274"/>
        <references refid="globals_8h_1ab5272b6a1f2bf961c7534ec91a243715" compoundref="mymath_8c" startline="51" endline="64">CountMem</references>
        <references refid="structsprite__s_1a8ce6c2916d6244600c434144ed6ac296" compoundref="graphics_8h" startline="31">sprite_s::mAnimations</references>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1af04a9f3481d89afc13d2e2e0a621fad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SDL_SetRect</definition>
        <argsstring>(SDL_Rect *rect, int x, int y, int w, int h)</argsstring>
        <name>SDL_SetRect</name>
        <param>
          <type>SDL_Rect *</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sdl set rectangle dimensions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">rect</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the rectangle to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/graphics.h" line="152" column="1" bodyfile="dumb-ways-to-memorize/graphics.c" bodystart="276" bodyend="282"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__GRAPHICS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__GRAPHICS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globals_8h" kindref="compound">globals.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="graphics_8h_1aed7818555b2da57314243d796315e4e9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GAME_NAME<sp/>&quot;Dumb<sp/>Ways<sp/>to<sp/>Memorize&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="graphics_8h_1aa7c5e8a32eb1645ee26fda856b4ca41a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCREEN_STRING<sp/>&quot;Screen<sp/>Dimensions&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="graphics_8h_1ab4f60dcfaf8e1c328b2862723508d851" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCREEN_RES_W<sp/>1280</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="graphics_8h_1a7a7d00e9da31c5ddbab5d35adab314f6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCREEN_RES_H<sp/>720</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="graphics_8h_1aeb21c7ac080eea985b7701df626d9cf4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_SPRITES<sp/>500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="graphics_8h_1a99f9cfd68ef4237b568bda6e3e63312f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_ANIMATIONS<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="struct_frame" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17" refid="struct_frame_1ae69b5c22d5cd3911965dc992d40ba4fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvec2__s" kindref="compound">vec2_t</ref><sp/><ref refid="struct_frame_1ae69b5c22d5cd3911965dc992d40ba4fc" kindref="member">Position</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}<ref refid="struct_frame" kindref="compound">Frame</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="graphics_8h_1a5371414b10358aeda7c6bcec8196342f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsprite__s" kindref="compound">sprite_s</ref><sp/><ref refid="structsprite__s" kindref="compound">sprite_t</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structsprite__s" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsprite__s" kindref="compound">sprite_s</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31" refid="structsprite__s_1a8ce6c2916d6244600c434144ed6ac296" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_frame" kindref="compound">Frame</ref><sp/>mAnimations[<ref refid="graphics_8h_1a99f9cfd68ef4237b568bda6e3e63312f" kindref="member">MAX_ANIMATIONS</ref>];<sp/><sp/></highlight></codeline>
<codeline lineno="32" refid="structsprite__s_1a13441ecc6f09930e330ecc4b48189778" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Texture<sp/>*<ref refid="structsprite__s_1a13441ecc6f09930e330ecc4b48189778" kindref="member">mTexture</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33" refid="structsprite__s_1a94c822928b0483a24e1f4a176f161954" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvec2__s" kindref="compound">vec2_t</ref><sp/><ref refid="structsprite__s_1a94c822928b0483a24e1f4a176f161954" kindref="member">mSize</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34" refid="structsprite__s_1acd9c3d76b8dfc0aed0c331ec5f0568f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsprite__s_1acd9c3d76b8dfc0aed0c331ec5f0568f1" kindref="member">mFrames</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35" refid="structsprite__s_1a43ab0d8eafd71383b2233bdee65911de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsprite__s_1a43ab0d8eafd71383b2233bdee65911de" kindref="member">refCount</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36" refid="structsprite__s_1a5ac083a645d964373f022d03df4849c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsprite__s_1a5ac083a645d964373f022d03df4849c8" kindref="member">name</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphics_8h_1a5a91ce2f20cdb3efdd3a10f8bcd79fe2" kindref="member">InitGraphics</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphics_8h_1a57deac6adc760a6c690d7c05b1b32b3d" kindref="member">ShutdownGraphics</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/>*<ref refid="graphics_8h_1a9cf2216f8c9099f0767277b29b0b8044" kindref="member">LoadAnimation</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame_width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame_height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="structsprite__s" kindref="compound">sprite_t</ref><sp/>*<ref refid="graphics_8h_1af4c49239d2f0e5306964c66be9553832" kindref="member">FindSprite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structobject__s_1a5ac083a645d964373f022d03df4849c8" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*position);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="structsprite__s" kindref="compound">sprite_t</ref><sp/>*<ref refid="graphics_8h_1a88a59e4cda72f43e47b635ed6c6a9f95" kindref="member">FindFreeSprite</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*position);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="structsprite__s" kindref="compound">sprite_t</ref><sp/>*<ref refid="graphics_8h_1a9ef47fe758affb875f01b07e551513c7" kindref="member">LoadSprite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structobject__s_1a5ac083a645d964373f022d03df4849c8" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphics_8h_1a17fde33b1d856d825920d633285aec6e" kindref="member">DrawSprite</ref>(<ref refid="structsprite__s" kindref="compound">sprite_t</ref><sp/>*sprite,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>frame,<sp/><ref refid="structvec2__s" kindref="compound">vec2_t</ref><sp/>*<sp/>position,<sp/>SDL_Renderer<sp/>*<sp/>renderer);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphics_8h_1a5668bec74dc06834b3141ac6da4063a2" kindref="member">FreeSprite</ref>(<ref refid="structsprite__s" kindref="compound">sprite_t</ref><sp/>*sprite);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//Unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphics_8h_1aa804be8d810666078d9915033a3d4317" kindref="member">IncrementFrame</ref>(<ref refid="structsprite__s" kindref="compound">sprite_t</ref><sp/>*sprite);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphics_8h_1af04a9f3481d89afc13d2e2e0a621fad6" kindref="member">SDL_SetRect</ref>(SDL_Rect<sp/>*rect,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structsprite__s" kindref="compound">sprite_t</ref><sp/>*<ref refid="graphics_8h_1a7e583fa4ad1a7137e056e5dece1ed6c4" kindref="member">gSprites</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="graphics_8h_1a3555fbac07f5c5a609c2e9b8c1b81731" kindref="member">gLastSprite</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SDL_Window<sp/>*<ref refid="graphics_8h_1a222f53a6a442d8f716dffd665e83528a" kindref="member">gWindow</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SDL_Renderer<sp/>*<ref refid="graphics_8h_1a4735638969a524c4ac90a88f23c59a1f" kindref="member">gRenderer</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SDL_Surface<sp/>*<ref refid="graphics_8h_1aec8ecf79cbfef975bd1751e8eac92e0a" kindref="member">gRedSurface</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SDL_Texture<sp/>*<ref refid="graphics_8h_1a3b5a0de489d49963cac9fd22f187d813" kindref="member">gRedTexture</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SDL_Renderer<sp/>*<ref refid="graphics_8h_1a324d0637f44d796996709bb187909c0c" kindref="member">gRedRenderer</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="dumb-ways-to-memorize/graphics.h"/>
  </compounddef>
</doxygen>
