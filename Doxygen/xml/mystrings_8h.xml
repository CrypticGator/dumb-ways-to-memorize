<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="mystrings_8h" kind="file" language="C++">
    <compoundname>mystrings.h</compoundname>
    <includes refid="jsmn_8h" local="no">jsmn.h</includes>
    <includedby refid="ai__interpret_8c" local="yes">dumb-ways-to-memorize/ai_interpret.c</includedby>
    <includedby refid="game_8c" local="yes">dumb-ways-to-memorize/game.c</includedby>
    <includedby refid="menu_8c" local="yes">dumb-ways-to-memorize/menu.c</includedby>
    <includedby refid="mystrings_8c" local="yes">dumb-ways-to-memorize/mystrings.c</includedby>
    <includedby refid="parselevel_8c" local="yes">dumb-ways-to-memorize/parselevel.c</includedby>
    <includedby refid="parseobject_8c" local="yes">dumb-ways-to-memorize/parseobject.c</includedby>
    <includedby refid="parsepowerup_8c" local="yes">dumb-ways-to-memorize/parsepowerup.c</includedby>
    <includedby refid="parsevariable_8c" local="yes">dumb-ways-to-memorize/parsevariable.c</includedby>
    <incdepgraph>
      <node id="302">
        <label>dumb-ways-to-memorize/mystrings.h</label>
        <link refid="mystrings.h"/>
        <childnode refid="303" relation="include">
        </childnode>
      </node>
      <node id="303">
        <label>jsmn.h</label>
        <link refid="jsmn_8h"/>
        <childnode refid="304" relation="include">
        </childnode>
      </node>
      <node id="304">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="309">
        <label>dumb-ways-to-memorize/mystrings.c</label>
        <link refid="mystrings_8c"/>
      </node>
      <node id="305">
        <label>dumb-ways-to-memorize/mystrings.h</label>
        <link refid="mystrings.h"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
      </node>
      <node id="312">
        <label>dumb-ways-to-memorize/parsepowerup.c</label>
        <link refid="parsepowerup_8c"/>
      </node>
      <node id="307">
        <label>dumb-ways-to-memorize/game.c</label>
        <link refid="game_8c"/>
      </node>
      <node id="308">
        <label>dumb-ways-to-memorize/menu.c</label>
        <link refid="menu_8c"/>
      </node>
      <node id="311">
        <label>dumb-ways-to-memorize/parseobject.c</label>
        <link refid="parseobject_8c"/>
      </node>
      <node id="313">
        <label>dumb-ways-to-memorize/parsevariable.c</label>
        <link refid="parsevariable_8c"/>
      </node>
      <node id="310">
        <label>dumb-ways-to-memorize/parselevel.c</label>
        <link refid="parselevel_8c"/>
      </node>
      <node id="306">
        <label>dumb-ways-to-memorize/ai_interpret.c</label>
        <link refid="ai__interpret_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="mystrings_8h_1aa063848210bb153608dd1b382a9e1c44" prot="public" static="no">
        <name>ALLOC_STR</name>
        <param><defname>X</defname></param>
        <initializer>( (char *) malloc(sizeof(char)*X) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="4" column="9" bodyfile="dumb-ways-to-memorize/mystrings.h" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mystrings_8h_1abee22002c9d20fec0bc94a3bfd4e40ad" prot="public" static="no">
        <name>GAME_STATE_SPLASH_STR</name>
        <initializer>&quot;Splash&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="9" column="9" bodyfile="dumb-ways-to-memorize/mystrings.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mystrings_8h_1a06f08b51f172bd9daaa65efb9a67ec85" prot="public" static="no">
        <name>GAME_STATE_START_STR</name>
        <initializer>&quot;Start&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="10" column="9" bodyfile="dumb-ways-to-memorize/mystrings.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mystrings_8h_1aba8c67d5ed1579335310ff77649ff89e" prot="public" static="no">
        <name>GAME_STATE_GUESS_STR</name>
        <initializer>&quot;Guess&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="11" column="9" bodyfile="dumb-ways-to-memorize/mystrings.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mystrings_8h_1abe75cf0ea422164cff13e9821b1aedf1" prot="public" static="no">
        <name>GAME_STATE_CHOOSE_STR</name>
        <initializer>&quot;Choose&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="12" column="9" bodyfile="dumb-ways-to-memorize/mystrings.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mystrings_8h_1acfc3e6c9cf34eaee72d09667d7d265db" prot="public" static="no">
        <name>GAME_STATE_PLAYING_STR</name>
        <initializer>&quot;Playing&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="13" column="9" bodyfile="dumb-ways-to-memorize/mystrings.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mystrings_8h_1a4e38eab119f1fee536a85e1f29c1ee44" prot="public" static="no">
        <name>GAME_STATE_END_STR</name>
        <initializer>&quot;End&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="14" column="9" bodyfile="dumb-ways-to-memorize/mystrings.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mystrings_8h_1a0357c834f41f5fa46fafa8b8ade095e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* FileToString</definition>
        <argsstring>(char *file)</argsstring>
        <name>FileToString</name>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads string data from a file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, filename of the file.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else a char*.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>1/30/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="26" column="1" bodyfile="dumb-ways-to-memorize/mystrings.c" bodystart="159" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="mystrings_8h_1a1f4734e9e15d21a1c72758530c1a468f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* TypeFromJSON</definition>
        <argsstring>(jsmntype_t Type)</argsstring>
        <name>TypeFromJSON</name>
        <param>
          <type><ref refid="jsmn_8h_1a065320719769f9dc1fbe30094e52802f" kindref="member">jsmntype_t</ref></type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type string from JSON string.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else a char*.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>1/30/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="38" column="1" bodyfile="dumb-ways-to-memorize/mystrings.c" bodystart="140" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="mystrings_8h_1a78d7d9580e10b30e6409ebfeb29e5cfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* JsmnToString</definition>
        <argsstring>(jsmntok_t *token, char *g_str)</argsstring>
        <name>JsmnToString</name>
        <param>
          <type><ref refid="structjsmntok__t" kindref="compound">jsmntok_t</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>g_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Jsmn to string.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">token</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the token. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">g_str</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the global string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else a char*.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>1/30/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="51" column="1" bodyfile="dumb-ways-to-memorize/mystrings.c" bodystart="34" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="mystrings_8h_1ac183085aec4f8b1867b5737aacb9c37f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* FindValue</definition>
        <argsstring>(struct object_s *obj, char *key, char *g_str)</argsstring>
        <name>FindValue</name>
        <param>
          <type>struct <ref refid="structobject__s" kindref="compound">object_s</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>g_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches for the a value in the object that matches the key string given. Recursive.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">key</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">g_str</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else the found value.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/25/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="66" column="1" bodyfile="dumb-ways-to-memorize/mystrings.c" bodystart="53" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="mystrings_8h_1aa5c26c3bf9ec4cf5d58937787db2d415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JsmnToInt</definition>
        <argsstring>(jsmntok_t *token, char *str, int *dst)</argsstring>
        <name>JsmnToInt</name>
        <param>
          <type><ref refid="structjsmntok__t" kindref="compound">jsmntok_t</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Jsmn to int.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">token</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the token. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">str</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, destination for the value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>2/28/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="78" column="1" bodyfile="dumb-ways-to-memorize/mystrings.c" bodystart="84" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="mystrings_8h_1a7847ecf365cd64921278854576e5ddcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int StrToInt</definition>
        <argsstring>(char *str)</argsstring>
        <name>StrToInt</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String to int.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">str</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>2/28/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="90" column="1" bodyfile="dumb-ways-to-memorize/mystrings.c" bodystart="92" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="mystrings_8h_1a357780097bc5067ece05926de2d77eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CharToInt</definition>
        <argsstring>(char c)</argsstring>
        <name>CharToInt</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Character to int. A cheap switch statement.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>2/28/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="102" column="1" bodyfile="dumb-ways-to-memorize/mystrings.c" bodystart="121" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="mystrings_8h_1a6466498df69994b55bb62b9b53652142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsmntok__t" kindref="compound">jsmntok_t</ref> *</type>
        <definition>jsmntok_t* FindKey</definition>
        <argsstring>(jsmntok_t *token, char *key, char *g_str)</argsstring>
        <name>FindKey</name>
        <param>
          <type><ref refid="structjsmntok__t" kindref="compound">jsmntok_t</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>g_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches for the first key that matches given gPlayerName, through through tokens &amp; g_str.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">token</parametername>
</parameternamelist>
<parameterdescription>
<para>The token. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">g_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to get from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else the found key.</para></simplesect>
<simplesect kind="author"><para>Junji </para></simplesect>
<simplesect kind="date"><para>1/30/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="116" column="1" bodyfile="dumb-ways-to-memorize/mystrings.c" bodystart="10" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="mystrings_8h_1a496e2427daae7d276aa1c25bf7173f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ConvertFileToUseable</definition>
        <argsstring>(char *fileName, jsmn_parser *parser, char **stringStorage, jsmntok_t **jsmnStorage)</argsstring>
        <name>ConvertFileToUseable</name>
        <param>
          <type>char *</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type><ref refid="structjsmn__parser" kindref="compound">jsmn_parser</ref> *</type>
          <declname>parser</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>stringStorage</declname>
        </param>
        <param>
          <type><ref refid="structjsmntok__t" kindref="compound">jsmntok_t</ref> **</type>
          <declname>jsmnStorage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert file to useable, by setting the storage for string and jsmntokens, give a filename.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, filename of the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">parser</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the parser. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">stringStorage</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the string storage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">jsmnStorage</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the jsmn storage.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The file converted to useable.</para></simplesect>
<simplesect kind="author"><para>Anthony Rios </para></simplesect>
<simplesect kind="date"><para>3/29/2016 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dumb-ways-to-memorize/mystrings.h" line="132" column="1" bodyfile="dumb-ways-to-memorize/mystrings.c" bodystart="192" bodyend="261"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__MYSTRINGS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__MYSTRINGS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="mystrings_8h_1aa063848210bb153608dd1b382a9e1c44" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALLOC_STR(X)<sp/>(<sp/>(char<sp/>*)<sp/>malloc(sizeof(char)*X)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="jsmn_8h" kindref="compound">jsmn.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structobject__s" kindref="compound">object_s</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="mystrings_8h_1abee22002c9d20fec0bc94a3bfd4e40ad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GAME_STATE_SPLASH_STR<sp/><sp/><sp/>&quot;Splash&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="mystrings_8h_1a06f08b51f172bd9daaa65efb9a67ec85" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GAME_STATE_START_STR<sp/><sp/><sp/><sp/>&quot;Start&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="mystrings_8h_1aba8c67d5ed1579335310ff77649ff89e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GAME_STATE_GUESS_STR<sp/><sp/><sp/><sp/>&quot;Guess&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="mystrings_8h_1abe75cf0ea422164cff13e9821b1aedf1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GAME_STATE_CHOOSE_STR<sp/><sp/><sp/>&quot;Choose&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="mystrings_8h_1acfc3e6c9cf34eaee72d09667d7d265db" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GAME_STATE_PLAYING_STR<sp/><sp/>&quot;Playing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="mystrings_8h_1a4e38eab119f1fee536a85e1f29c1ee44" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GAME_STATE_END_STR<sp/><sp/><sp/><sp/><sp/><sp/>&quot;End&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="mystrings_8h_1a0357c834f41f5fa46fafa8b8ade095e4" kindref="member">FileToString</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="mystrings_8h_1a1f4734e9e15d21a1c72758530c1a468f" kindref="member">TypeFromJSON</ref>(<ref refid="jsmn_8h_1a065320719769f9dc1fbe30094e52802f" kindref="member">jsmntype_t</ref><sp/>Type);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="mystrings_8h_1a78d7d9580e10b30e6409ebfeb29e5cfe" kindref="member">JsmnToString</ref>(<ref refid="structjsmntok__t" kindref="compound">jsmntok_t</ref><sp/>*token,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*g_str);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="mystrings_8h_1ac183085aec4f8b1867b5737aacb9c37f" kindref="member">FindValue</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structobject__s" kindref="compound">object_s</ref><sp/>*<sp/>obj,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*g_str);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mystrings_8h_1aa5c26c3bf9ec4cf5d58937787db2d415" kindref="member">JsmnToInt</ref>(<ref refid="structjsmntok__t" kindref="compound">jsmntok_t</ref><sp/>*token,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dst);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mystrings_8h_1a7847ecf365cd64921278854576e5ddcc" kindref="member">StrToInt</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mystrings_8h_1a357780097bc5067ece05926de2d77eae" kindref="member">CharToInt</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="structjsmntok__t" kindref="compound">jsmntok_t</ref><sp/>*<sp/><ref refid="mystrings_8h_1a6466498df69994b55bb62b9b53652142" kindref="member">FindKey</ref>(<ref refid="structjsmntok__t" kindref="compound">jsmntok_t</ref><sp/>*token,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*g_str);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mystrings_8h_1a496e2427daae7d276aa1c25bf7173f9b" kindref="member">ConvertFileToUseable</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName,<sp/><ref refid="structjsmn__parser" kindref="compound">jsmn_parser</ref><sp/>*parser,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stringStorage,<sp/><ref refid="structjsmntok__t" kindref="compound">jsmntok_t</ref><sp/>**jsmnStorage);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="dumb-ways-to-memorize/mystrings.h"/>
  </compounddef>
</doxygen>
